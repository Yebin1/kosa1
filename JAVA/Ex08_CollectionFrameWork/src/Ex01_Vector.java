import java.util.Vector;

/* 0908

Collection FrameWork
다수의 데이터를 다루는 표준화된 인터페이스를 구현하고 있는 클래스의 집합

Collection 인터페이스 >> 상속 List (구현: ArrayList), Set (구현: HashSet)
>> ArrayList의 부모 타입은 List이다 (O) >> 다형성
>> Collection은 ArrayList의 부모 타입이다 (O)


Map 인터페이스 (key, value) 쌍의 배열 >> 구현 클래스: HashMap

1. List (줄을 서시오)
 * 순서(번호표), 중복 허용 >> 내부적으로 데이터(자료)를 배열로 관리
>> [홍길동] [홍길동] [홍길동] >> 중복된 데이터 관리

1-1. Vector (구버전)		>> 동기화 보장 (멀티 스레드) >> Lock 보호 >> 성능 저하
1-2. ArrayList (신버전)	>> 동기화 보장 (멀티 스레드) >> Lock 옵션 (기본X) >> 성능 우선

///////////////////////////////////////////////////////////////
기존: 다수의 데이터를 다루는 방법 >> Array (정적, 고정)
array 방의 개수가 한 번 정해지면 크기 변경이 불가하다

int[] arr = new int[5];
arr[0] = 100;
int[] arr2 = {10, 20, 30}
데이터가 많아지면 새로운 크기의 배열을 만들고 데이터 이동 (코드로 직접 구현)

Array
1. 배열의 크기가 고정: Car[] cars = {new Car(), new Car()}; 방 2개
2. 접근 방법 (index 첨자) 방 번호로 접근: cars[0] ... n(length-1)번째 방
///////////////////////////////////////////////////////////////

List 인터페이스를 구현하고 있는 (Vector, ArrayList)
1. 배열의 크기를 동적으로 확장, 축소 가능 >> 컴파일러가 만들고 데이터 이동을 알아서
2. 순서를 유지 (내부적으로 Array 사용), 중복값 허용
3. 데이터 저장 공간 Array 사용

*/


public class Ex01_Vector {

	public static void main(String[] args) {
		Vector v = new Vector();
		System.out.println("초기 default 용량: " + v.capacity());	// 10
		System.out.println("size: " + v.size());				// 0 (실 데이터 크기)
		
		v.add("AA");
		v.add("AA");
		v.add("AA");
		v.add(10);
		
		System.out.println("size: " + v.size());				// 4
		System.out.println(v.toString()); 						// [AA, AA, AA, 10] 재정의: 데이터 출력
		// Array의 length: 배열의 길이 (데이터 유무 상관 X) >> 편법적으로 index 개념 만들어 사이즈처럼 사용
		// Collection의 size: 값을 가지고 있는 배열 사이즈
		
		for (int i = 0; i < v.size(); i++) {
			System.out.println(v.get(i));	// get(index) >> 값을 return
											// 정적 배열 array[index]
		} System.out.println("---");
		for (Object obj: v) {
			System.out.println(obj);
		}
		// 단점: 작은 데이터 (같은 타입의 데이터) ... 가장 큰 타입을 사용하는 것 불합리
		// 제너릭 >> 타입을 강제 >> 추후 별도로 학습
		Vector<String> v2 = new Vector<String>();
		v2.add("hello");
		v2.add("world");
		v2.add("king");
		for (String str: v2) {
			System.out.println(str);
		}
		
		Vector v3 = new Vector();
		System.out.println(v3.capacity());	// 10
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");
		v3.add("A");	// 11번째
		System.out.println(v3.toString());
		System.out.println(v3.capacity());	// 두 배로 늘어남
	}

}
