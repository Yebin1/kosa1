<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 
객체의 생성과 조립(주입)

Spring은 자신만의 컨테이너를 제공 (Spring 전용 메모리 공간) 안에
xml 또는 annotation을 통해 객체를 생성하고 조립하는 과정을 수행 (객체간 관계 설정)

컨테이너 안 생성된 객체를 불러서 ... getbean() 함수

IOC 컨테이너 (제어의 역전)
프로그램의 제어 구조가 바뀜
내가 주도했던 코드 >> Spring이 주체가 됨
작은 단위의 부품을 만들어 놓고 조립하는 행위 (레고 블럭 ..)

1. DataSourceFactory 빈 객체
2. jdbc.properties 파일 read
3. DataSourceFactory setter 함수를 통해 read한 value 주입

Key Point
xml 설정 파일에서 특정 [파일]을 read하려면 Spring이 제공하는 context 자원 사용
xmlns:context="http://www.springframework.org/schema/context"
context 접두어를 통해 기능 사용
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.3.xsd

 -->
<context:property-placeholder location="classpath:DI_11_Spring/jdbc.properties" />

<bean id="dataSourceFactory" class="DI_11_Spring.DataSourceFactory">
	<property name="jdbcdriver" value="${jdbc.driver}"></property>
	<property name="jdbcurl" value="${jdbc.url}"></property>
	<property name="username" value="${jdbc.username}"></property>
	<property name="password" value="${jdbc.password}"></property>
</bean>

</beans>