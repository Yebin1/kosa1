[DI 개념]: 의존성 주입 (의존 객체 주입)

프로젝트 >> 수많은 클래스 생성 >> 클래스간 관계를 통해 구현

1. 상속 (is ~ a)
2. 포함(has ~ a)

A라는 클래스는 B라는 클래스가 필요하다
프로그래밍적으로 풀면 (A는 B의 자원을 사용 가능)


// 상속
class A extends B {}


// 포함
class A {
	// B b = new B();
	
	B b;
	A() {
		b = new B();
	}
}
>>>>>>> A a = new A(); a.b.자원 접근


class A {			// 부분 연관
	B b;
	A(B b){		// 생성자를 통해 의존 객체의 주소값을 받음
	this.b = b;
	}
}
>>>>>>> main >> B b = new B();			A a = new A(b); 	>> 연관


class A {
	public B print (B b) {		// 의존 (함수에서 < 라는 전제 조건)
		return b;
	}
}
>>>>>>> main >> A a = new A(); a.print(new B());


-- 나는 니가 필요해 (나는 너의 주소가 필요해)
NewRecordView 클래스는 NewRecord에 의존한다
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 주입 또는 생성
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 생성 (두 객체의 life-cycle이 동일)
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 주입(두 객체의 life-cycle이 다름)

DI (의존성 주입): Spring 학습의 첫번째 개념
result: 필요한 객체를 [생성자]를 통해 그 주소를 주입(또는 생성) 가능

-------------------------------------------------------------------------

[DI 개념]_2: 의존성 주입 (의존 객체 주입)
- NewRecordView 클래스는필요로 하는 객체를 setter 함수를 통해 주입 (주소를) 받아 사용
- 객체의 생성이 서로 독립적 >> 필요시 객체를 주입 받을 수 있다

NewRecordView view = new NewRecordView();
NewRecord record = new NewRecord(100, 50, 40);
- 두 객체의 life-cycle은 같지 않다 >> 집합 연관

-------------------------------------------------------------------------

시나리오
class A, class B

A라는 클래스가 B 클래스를 사용하는 방법

1. 상속 (is ~ a)		>> Spring Framework 에서는 관심이 없음
2. 포함 (has ~ a)	>> 내 클래스 안에 다른 클래스가 들어오는 것











