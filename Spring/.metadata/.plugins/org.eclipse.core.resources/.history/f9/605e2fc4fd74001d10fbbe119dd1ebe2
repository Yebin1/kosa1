[DI 개념]: 의존성 주입 (의존 객체 주입)

프로젝트 >> 수많은 클래스 생성 >> 클래스간 관계를 통해 구현

1. 상속 (is ~ a)
2. 포함(has ~ a)

A라는 클래스는 B라는 클래스가 필요하다
프로그래밍적으로 풀면 (A는 B의 자원을 사용 가능)


// 상속
class A extends B {}


// 포함
class A {
	// B b = new B();
	
	B b;
	A() {
		b = new B();
	}
}
>>>>>>> A a = new A(); a.b.자원 접근


class A {			// 부분 연관
	B b;
	A(B b){		// 생성자를 통해 의존 객체의 주소값을 받음
	this.b = b;
	}
}
>>>>>>> main >> B b = new B();			A a = new A(b); 	>> 연관


class A {
	public B print (B b) {		// 의존 (함수에서 < 라는 전제 조건)
		return b;
	}
}
>>>>>>> main >> A a = new A(); a.print(new B());


-- 나는 니가 필요해 (나는 너의 주소가 필요해)
NewRecordView 클래스는 NewRecord에 의존한다
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 주입 또는 생성
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 생성 (두 객체의 life-cycle이 동일)
NewRecordView 클래스가 필요한 객체를 [생성자]를 통해 주입(두 객체의 life-cycle이 다름)

DI (의존성 주입): Spring 학습의 첫번째 개념
result: 필요한 객체를 [생성자]를 통해 그 주소를 주입(또는 생성) 가능

-------------------------------------------------------------------------

[DI 개념]_2: 의존성 주입 (의존 객체 주입)
- NewRecordView 클래스는필요로 하는 객체를 setter 함수를 통해 주입 (주소를) 받아 사용
- 객체의 생성이 서로 독립적 >> 필요시 객체를 주입 받을 수 있다

NewRecordView view = new NewRecordView();
NewRecord record = new NewRecord(100, 50, 40);
- 두 객체의 life-cycle은 같지 않다 >> 집합 연관

-------------------------------------------------------------------------

시나리오
class A, class B

A라는 클래스가 B 클래스를 사용하는 방법

1. 상속 (is ~ a)		>> Spring Framework 에서는 관심이 없음

2. 포함 (has ~ a)	>> 내 클래스 안에 다른 클래스가 들어오는 것

2.1. [생성자]를 주입 (constructor injection)
>> main 함수 >> A a = new A();
class A {
	B b; // (2) B가 필요한 생성자를 주입 받음
	A() {
		this.b = new B(); // (1) 이 생성자를 통해
	}
}
>> A라는 클래스의 생성자에서 B라는 객체를 생성해 사용 (복합 연관)

2.2. setter 함수를 통한 주입 (setter injection)
>> main 함수 >> A a = new A(); B b = new B();  a.SetB(b);
class A {
	B b;
	A() {};
	public void SetB(B b) {
		this.b = b;
	}
}

Result: Spring Framework는 다른 객체에 의존(참조)하기 위해
생성자 주입, setter 주입 2개 방법을 통해 구현
>>>>>>>> 통칭 DI

+@ >> interface 들어가면 금상첨화 .. >> 다형성 >> 느슨한 구조 구현 가능. ..

정리)
1. 생성자를 통해 주입 (의무적)
2. setter 함수를 통해 주입 (필요에 따라)
3. 다형성 (interface 활용) >> 생성자, setter 함수 ... interface 활용

-------------------------------------------------------------------------

Spring Framework 사용

1. Spring.io 사이트 방문
1.1. 사용하려는 spring 버전을 확인 후 다운로드

구버전 다운로드
https://repo.spring.io/ui/native/release/org/springframework/spring

수업 >> 다운로드 후 프로젝트에 추가하여 사용

현업 >> Maven 사용 >> 사이트 >> 필요로 하는 다양한 jar 보유 >> 
https://mvnrepository.com/artifact/org.springframework/spring-core
주소 복사 >> pom.xml 파일에 붙여넣기 >> 자동으로 다운로드

<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.3.6</version>
</dependency>

비교)
git: remote (github)
git: local 저장소 (commit)

maven: https://mvnrepository.com
maven: local (자동 생성) >> C:\Users\KOSA\.m2\repository >> 필요한 jar 파일 다운

프로젝트 빌드, 배포 도구 (소프트웨어) >> gradle, ant

-------------------------------------------------------------------------

실습

다운로드 받은 SpringFramework jar 파일 직접 사용
C:\Spring\Framework\spring-5.3.6-dist\spring-framework-5.3.6\libs

의존하는 라이브러리가 필요
C:\Spring\Framework\spring-framework-3.0.2.RELEASE-dependencies

-------------------------------------------------------------------------

1. SpringFramework 핵심 엔진 (lib)
core
context
beans
expression
jar 파일 참조 추가 (java build path에서 add external jars ...)

2. 설정하기
2.1. xml 파일



