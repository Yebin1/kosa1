<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 
객체의 생성과 조립(주입)

Spring은 자신만의 컨테이너를 제공 (Spring 전용 메모리 공간) 안에
xml 또는 annotation을 통해 객체를 생성하고 조립하는 과정을 수행 (객체간 관계 설정)

컨테이너 안 생성된 객체를 불러서 ... getbean() 함수

IOC 컨테이너 (제어의 역전)
프로그램의 제어 구조가 바뀜
내가 주도했던 코드 >> Spring이 주체가 됨
작은 단위의 부품을 만들어 놓고 조립하는 행위 (레고 블럭 ..)

java 코드
ProtocolHandler handler = new ProtocolHandler();
		
List<MyFilter> list = new ArrayList<MyFilter>();
list.add(new EncFilter());
list.add(new HeaderFilter());
list.add(new ZipFilter());
		
// 주소값 전달 (의존성 주입)
handler.setFilters(list);

1단계)
필요한 모든 bean 객체를 생성 (new 자원 모두 bean)
사용자가 직접 생성하지 않은 클래스 (Java API 제공) >> Collection class >> Spring이 제공
>> xml 설정에서는 element 제공
>> <list>, <map>, <set> 



 -->

<bean id="encFilter" class="DI_07_Spring.EncFilter"></bean>
<bean id="headerFilter" class="DI_07_Spring.HeaderFilter"></bean>
<bean id="zipFilter" class="DI_07_Spring.ZipFilter"></bean>

<bean id="protocolHandler" class="DI_07_Spring.ProtocolHandler">
	<property name="filters"></property>
</bean>
<bean id="arrayList" class="DI_07_Spring."></bean>

</beans>